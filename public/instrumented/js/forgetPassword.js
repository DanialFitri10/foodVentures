function cov_awik4rivn(){var path="C:\\Users\\kavin\\Documents\\foodVentures\\foodVentures\\public\\js\\forgetPassword.js";var hash="3e39c1a1cdfae2c9b9960c0565bc93581610ddf1";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\Users\\kavin\\Documents\\foodVentures\\foodVentures\\public\\js\\forgetPassword.js",statementMap:{"0":{start:{line:42,column:16},end:{line:42,column:34}},"1":{start:{line:43,column:19},end:{line:43,column:40}},"2":{start:{line:44,column:12},end:{line:44,column:21}},"3":{start:{line:45,column:13},end:{line:45,column:17}},"4":{start:{line:47,column:0},end:{line:47,column:24}},"5":{start:{line:49,column:13},end:{line:52,column:1}},"6":{start:{line:54,column:0},end:{line:79,column:3}},"7":{start:{line:55,column:4},end:{line:78,column:5}},"8":{start:{line:56,column:28},end:{line:64,column:10}},"9":{start:{line:66,column:21},end:{line:71,column:10}},"10":{start:{line:73,column:8},end:{line:73,column:53}},"11":{start:{line:74,column:8},end:{line:74,column:56}},"12":{start:{line:76,column:8},end:{line:76,column:29}},"13":{start:{line:77,column:8},end:{line:77,column:52}},"14":{start:{line:81,column:0},end:{line:83,column:3}},"15":{start:{line:82,column:4},end:{line:82,column:53}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:54,column:24},end:{line:54,column:25}},loc:{start:{line:54,column:44},end:{line:79,column:1}},line:54},"1":{name:"(anonymous_1)",decl:{start:{line:81,column:17},end:{line:81,column:18}},loc:{start:{line:81,column:23},end:{line:83,column:1}},line:81}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0},f:{"0":0,"1":0},b:{},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"3e39c1a1cdfae2c9b9960c0565bc93581610ddf1"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_awik4rivn=function(){return actualCoverage;};}return actualCoverage;}cov_awik4rivn();// // forgetPassword.js
// const nodeMailer = require('nodemailer');
// const html = `
//     <h1>Hello!</h1>
//     <p>This email is for you to reset your password. Thanks!</p>
// `;
// async function forgetPassword() {
//     const transporter = nodeMailer.createTransport({
//         host: "mail.openjavascript.info", // SMTP server address (usually mail.your-domain.com)
//         port: 465, // Port for SMTP (usually 465)
//         secure: true, // Usually true if connecting to port 465
//         auth: {
//             user: "test@openjavascipt.info", // Your email address
//             pass: "NodeMailer123!",
//         }
//     });
//     const info = await transporter.sendMail({
//         from: 'OpenJavaScript <test@javascript.info>',
//         to: 'test2@openjavascript.info',
//         subject: 'Testing, testing, 123',
//         html: html,
//     })
//     console.log("Message sent" + info.messageId);
// }
// forgetPassword()
// .catch(e => console.log(e));
// //function forgetPassword() {
// //    const email = document.getElementById('email').value;
// // redirects the user to a page where user can input their email for reset of password
// //    window.location.href = 'password_reset_sent.html';
// //}
// server.js
const express=(cov_awik4rivn().s[0]++,require('express'));const nodeMailer=(cov_awik4rivn().s[1]++,require('nodemailer'));const app=(cov_awik4rivn().s[2]++,express());const port=(cov_awik4rivn().s[3]++,3000);cov_awik4rivn().s[4]++;app.use(express.json());const html=(cov_awik4rivn().s[5]++,`
    <h1>Hello!</h1>
    <p>This email is for you to reset your password. Thanks!</p>
`);cov_awik4rivn().s[6]++;app.post('/send-email',async(req,res)=>{cov_awik4rivn().f[0]++;cov_awik4rivn().s[7]++;try{const transporter=(cov_awik4rivn().s[8]++,nodeMailer.createTransport({host:"mail.openjavascript.info",port:465,secure:true,auth:{user:"test@openjavascript.info",pass:"NodeMailer123!"}}));const info=(cov_awik4rivn().s[9]++,await transporter.sendMail({from:'OpenJavaScript <test@javascript.info>',to:'carasim80@gmail.com',// assuming you pass the email address through the request body
subject:'Testing, testing, 123',html:html}));cov_awik4rivn().s[10]++;console.log("Message sent"+info.messageId);cov_awik4rivn().s[11]++;res.status(200).send('Email sent successfully');}catch(error){cov_awik4rivn().s[12]++;console.error(error);cov_awik4rivn().s[13]++;res.status(500).send('Error sending email');}});cov_awik4rivn().s[14]++;app.listen(port,()=>{cov_awik4rivn().f[1]++;cov_awik4rivn().s[15]++;console.log(`Server is running on port ${port}`);});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfYXdpazRyaXZuIiwiYWN0dWFsQ292ZXJhZ2UiLCJleHByZXNzIiwicyIsInJlcXVpcmUiLCJub2RlTWFpbGVyIiwiYXBwIiwicG9ydCIsInVzZSIsImpzb24iLCJodG1sIiwicG9zdCIsInJlcSIsInJlcyIsImYiLCJ0cmFuc3BvcnRlciIsImNyZWF0ZVRyYW5zcG9ydCIsImhvc3QiLCJzZWN1cmUiLCJhdXRoIiwidXNlciIsInBhc3MiLCJpbmZvIiwic2VuZE1haWwiLCJmcm9tIiwidG8iLCJzdWJqZWN0IiwiY29uc29sZSIsImxvZyIsIm1lc3NhZ2VJZCIsInN0YXR1cyIsInNlbmQiLCJlcnJvciIsImxpc3RlbiJdLCJzb3VyY2VzIjpbImZvcmdldFBhc3N3b3JkLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIC8vIGZvcmdldFBhc3N3b3JkLmpzXHJcbi8vIGNvbnN0IG5vZGVNYWlsZXIgPSByZXF1aXJlKCdub2RlbWFpbGVyJyk7XHJcblxyXG4vLyBjb25zdCBodG1sID0gYFxyXG4vLyAgICAgPGgxPkhlbGxvITwvaDE+XHJcbi8vICAgICA8cD5UaGlzIGVtYWlsIGlzIGZvciB5b3UgdG8gcmVzZXQgeW91ciBwYXNzd29yZC4gVGhhbmtzITwvcD5cclxuLy8gYDtcclxuXHJcbi8vIGFzeW5jIGZ1bmN0aW9uIGZvcmdldFBhc3N3b3JkKCkge1xyXG5cclxuLy8gICAgIGNvbnN0IHRyYW5zcG9ydGVyID0gbm9kZU1haWxlci5jcmVhdGVUcmFuc3BvcnQoe1xyXG4vLyAgICAgICAgIGhvc3Q6IFwibWFpbC5vcGVuamF2YXNjcmlwdC5pbmZvXCIsIC8vIFNNVFAgc2VydmVyIGFkZHJlc3MgKHVzdWFsbHkgbWFpbC55b3VyLWRvbWFpbi5jb20pXHJcbi8vICAgICAgICAgcG9ydDogNDY1LCAvLyBQb3J0IGZvciBTTVRQICh1c3VhbGx5IDQ2NSlcclxuLy8gICAgICAgICBzZWN1cmU6IHRydWUsIC8vIFVzdWFsbHkgdHJ1ZSBpZiBjb25uZWN0aW5nIHRvIHBvcnQgNDY1XHJcbi8vICAgICAgICAgYXV0aDoge1xyXG4vLyAgICAgICAgICAgICB1c2VyOiBcInRlc3RAb3BlbmphdmFzY2lwdC5pbmZvXCIsIC8vIFlvdXIgZW1haWwgYWRkcmVzc1xyXG4vLyAgICAgICAgICAgICBwYXNzOiBcIk5vZGVNYWlsZXIxMjMhXCIsXHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgfSk7XHJcblxyXG4vLyAgICAgY29uc3QgaW5mbyA9IGF3YWl0IHRyYW5zcG9ydGVyLnNlbmRNYWlsKHtcclxuLy8gICAgICAgICBmcm9tOiAnT3BlbkphdmFTY3JpcHQgPHRlc3RAamF2YXNjcmlwdC5pbmZvPicsXHJcbi8vICAgICAgICAgdG86ICd0ZXN0MkBvcGVuamF2YXNjcmlwdC5pbmZvJyxcclxuLy8gICAgICAgICBzdWJqZWN0OiAnVGVzdGluZywgdGVzdGluZywgMTIzJyxcclxuLy8gICAgICAgICBodG1sOiBodG1sLFxyXG4vLyAgICAgfSlcclxuXHJcbi8vICAgICBjb25zb2xlLmxvZyhcIk1lc3NhZ2Ugc2VudFwiICsgaW5mby5tZXNzYWdlSWQpO1xyXG4vLyB9XHJcblxyXG4vLyBmb3JnZXRQYXNzd29yZCgpXHJcbi8vIC5jYXRjaChlID0+IGNvbnNvbGUubG9nKGUpKTtcclxuXHJcbi8vIC8vZnVuY3Rpb24gZm9yZ2V0UGFzc3dvcmQoKSB7XHJcbi8vIC8vICAgIGNvbnN0IGVtYWlsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2VtYWlsJykudmFsdWU7XHJcblxyXG4vLyAvLyByZWRpcmVjdHMgdGhlIHVzZXIgdG8gYSBwYWdlIHdoZXJlIHVzZXIgY2FuIGlucHV0IHRoZWlyIGVtYWlsIGZvciByZXNldCBvZiBwYXNzd29yZFxyXG4vLyAvLyAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9ICdwYXNzd29yZF9yZXNldF9zZW50Lmh0bWwnO1xyXG4vLyAvL31cclxuXHJcbi8vIHNlcnZlci5qc1xyXG5jb25zdCBleHByZXNzID0gcmVxdWlyZSgnZXhwcmVzcycpO1xyXG5jb25zdCBub2RlTWFpbGVyID0gcmVxdWlyZSgnbm9kZW1haWxlcicpO1xyXG5jb25zdCBhcHAgPSBleHByZXNzKCk7XHJcbmNvbnN0IHBvcnQgPSAzMDAwO1xyXG5cclxuYXBwLnVzZShleHByZXNzLmpzb24oKSk7XHJcblxyXG5jb25zdCBodG1sID0gYFxyXG4gICAgPGgxPkhlbGxvITwvaDE+XHJcbiAgICA8cD5UaGlzIGVtYWlsIGlzIGZvciB5b3UgdG8gcmVzZXQgeW91ciBwYXNzd29yZC4gVGhhbmtzITwvcD5cclxuYDtcclxuXHJcbmFwcC5wb3N0KCcvc2VuZC1lbWFpbCcsIGFzeW5jIChyZXEsIHJlcykgPT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCB0cmFuc3BvcnRlciA9IG5vZGVNYWlsZXIuY3JlYXRlVHJhbnNwb3J0KHtcclxuICAgICAgICAgICAgaG9zdDogXCJtYWlsLm9wZW5qYXZhc2NyaXB0LmluZm9cIixcclxuICAgICAgICAgICAgcG9ydDogNDY1LFxyXG4gICAgICAgICAgICBzZWN1cmU6IHRydWUsXHJcbiAgICAgICAgICAgIGF1dGg6IHtcclxuICAgICAgICAgICAgICAgIHVzZXI6IFwidGVzdEBvcGVuamF2YXNjcmlwdC5pbmZvXCIsXHJcbiAgICAgICAgICAgICAgICBwYXNzOiBcIk5vZGVNYWlsZXIxMjMhXCIsXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgY29uc3QgaW5mbyA9IGF3YWl0IHRyYW5zcG9ydGVyLnNlbmRNYWlsKHtcclxuICAgICAgICAgICAgZnJvbTogJ09wZW5KYXZhU2NyaXB0IDx0ZXN0QGphdmFzY3JpcHQuaW5mbz4nLFxyXG4gICAgICAgICAgICB0bzogJ2NhcmFzaW04MEBnbWFpbC5jb20nLCAvLyBhc3N1bWluZyB5b3UgcGFzcyB0aGUgZW1haWwgYWRkcmVzcyB0aHJvdWdoIHRoZSByZXF1ZXN0IGJvZHlcclxuICAgICAgICAgICAgc3ViamVjdDogJ1Rlc3RpbmcsIHRlc3RpbmcsIDEyMycsXHJcbiAgICAgICAgICAgIGh0bWw6IGh0bWwsXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiTWVzc2FnZSBzZW50XCIgKyBpbmZvLm1lc3NhZ2VJZCk7XHJcbiAgICAgICAgcmVzLnN0YXR1cygyMDApLnNlbmQoJ0VtYWlsIHNlbnQgc3VjY2Vzc2Z1bGx5Jyk7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xyXG4gICAgICAgIHJlcy5zdGF0dXMoNTAwKS5zZW5kKCdFcnJvciBzZW5kaW5nIGVtYWlsJyk7XHJcbiAgICB9XHJcbn0pO1xyXG5cclxuYXBwLmxpc3Rlbihwb3J0LCAoKSA9PiB7XHJcbiAgICBjb25zb2xlLmxvZyhgU2VydmVyIGlzIHJ1bm5pbmcgb24gcG9ydCAke3BvcnR9YCk7XHJcbn0pO1xyXG4iXSwibWFwcGluZ3MiOiJ3NkRBZVk7QUFBQUEsYUFBQSxTQUFBQSxDQUFBLFNBQUFDLGNBQUEsV0FBQUEsY0FBQSxFQUFBRCxhQUFBLEdBZlo7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBLEtBQU0sQ0FBQUUsT0FBTyxFQUFBRixhQUFBLEdBQUFHLENBQUEsTUFBR0MsT0FBTyxDQUFDLFNBQVMsQ0FBQyxFQUNsQyxLQUFNLENBQUFDLFVBQVUsRUFBQUwsYUFBQSxHQUFBRyxDQUFBLE1BQUdDLE9BQU8sQ0FBQyxZQUFZLENBQUMsRUFDeEMsS0FBTSxDQUFBRSxHQUFHLEVBQUFOLGFBQUEsR0FBQUcsQ0FBQSxNQUFHRCxPQUFPLENBQUMsQ0FBQyxFQUNyQixLQUFNLENBQUFLLElBQUksRUFBQVAsYUFBQSxHQUFBRyxDQUFBLE1BQUcsSUFBSSxFQUFDSCxhQUFBLEdBQUFHLENBQUEsTUFFbEJHLEdBQUcsQ0FBQ0UsR0FBRyxDQUFDTixPQUFPLENBQUNPLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FFdkIsS0FBTSxDQUFBQyxJQUFJLEVBQUFWLGFBQUEsR0FBQUcsQ0FBQSxNQUFJO0FBQ2Q7QUFDQTtBQUNBLENBQUMsRUFBQ0gsYUFBQSxHQUFBRyxDQUFBLE1BRUZHLEdBQUcsQ0FBQ0ssSUFBSSxDQUFDLGFBQWEsQ0FBRSxNQUFPQyxHQUFHLENBQUVDLEdBQUcsR0FBSyxDQUFBYixhQUFBLEdBQUFjLENBQUEsTUFBQWQsYUFBQSxHQUFBRyxDQUFBLE1BQ3hDLEdBQUksQ0FDQSxLQUFNLENBQUFZLFdBQVcsRUFBQWYsYUFBQSxHQUFBRyxDQUFBLE1BQUdFLFVBQVUsQ0FBQ1csZUFBZSxDQUFDLENBQzNDQyxJQUFJLENBQUUsMEJBQTBCLENBQ2hDVixJQUFJLENBQUUsR0FBRyxDQUNUVyxNQUFNLENBQUUsSUFBSSxDQUNaQyxJQUFJLENBQUUsQ0FDRkMsSUFBSSxDQUFFLDBCQUEwQixDQUNoQ0MsSUFBSSxDQUFFLGdCQUNWLENBQ0osQ0FBQyxDQUFDLEVBRUYsS0FBTSxDQUFBQyxJQUFJLEVBQUF0QixhQUFBLEdBQUFHLENBQUEsTUFBRyxLQUFNLENBQUFZLFdBQVcsQ0FBQ1EsUUFBUSxDQUFDLENBQ3BDQyxJQUFJLENBQUUsdUNBQXVDLENBQzdDQyxFQUFFLENBQUUscUJBQXFCLENBQUU7QUFDM0JDLE9BQU8sQ0FBRSx1QkFBdUIsQ0FDaENoQixJQUFJLENBQUVBLElBQ1YsQ0FBQyxDQUFDLEVBQUNWLGFBQUEsR0FBQUcsQ0FBQSxPQUVId0IsT0FBTyxDQUFDQyxHQUFHLENBQUMsY0FBYyxDQUFHTixJQUFJLENBQUNPLFNBQVMsQ0FBQyxDQUFDN0IsYUFBQSxHQUFBRyxDQUFBLE9BQzdDVSxHQUFHLENBQUNpQixNQUFNLENBQUMsR0FBRyxDQUFDLENBQUNDLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxDQUNuRCxDQUFFLE1BQU9DLEtBQUssQ0FBRSxDQUFBaEMsYUFBQSxHQUFBRyxDQUFBLE9BQ1p3QixPQUFPLENBQUNLLEtBQUssQ0FBQ0EsS0FBSyxDQUFDLENBQUNoQyxhQUFBLEdBQUFHLENBQUEsT0FDckJVLEdBQUcsQ0FBQ2lCLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLHFCQUFxQixDQUFDLENBQy9DLENBQ0osQ0FBQyxDQUFDLENBQUMvQixhQUFBLEdBQUFHLENBQUEsT0FFSEcsR0FBRyxDQUFDMkIsTUFBTSxDQUFDMUIsSUFBSSxDQUFFLElBQU0sQ0FBQVAsYUFBQSxHQUFBYyxDQUFBLE1BQUFkLGFBQUEsR0FBQUcsQ0FBQSxPQUNuQndCLE9BQU8sQ0FBQ0MsR0FBRyxDQUFFLDZCQUE0QnJCLElBQUssRUFBQyxDQUFDLENBQ3BELENBQUMsQ0FBQyJ9