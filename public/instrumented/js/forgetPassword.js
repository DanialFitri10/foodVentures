function cov_29udg5rdtq(){var path="C:\\Users\\dania\\Documents\\mew\\foodVentures\\public\\js\\forgetPassword.js";var hash="12742046216c3bf9218df4db0817a9ea9e8bbb56";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\Users\\dania\\Documents\\mew\\foodVentures\\public\\js\\forgetPassword.js",statementMap:{"0":{start:{line:42,column:16},end:{line:42,column:34}},"1":{start:{line:43,column:19},end:{line:43,column:40}},"2":{start:{line:44,column:12},end:{line:44,column:21}},"3":{start:{line:45,column:13},end:{line:45,column:17}},"4":{start:{line:47,column:0},end:{line:47,column:24}},"5":{start:{line:49,column:13},end:{line:52,column:1}},"6":{start:{line:54,column:0},end:{line:79,column:3}},"7":{start:{line:55,column:4},end:{line:78,column:5}},"8":{start:{line:56,column:28},end:{line:64,column:10}},"9":{start:{line:66,column:21},end:{line:71,column:10}},"10":{start:{line:73,column:8},end:{line:73,column:53}},"11":{start:{line:74,column:8},end:{line:74,column:56}},"12":{start:{line:76,column:8},end:{line:76,column:29}},"13":{start:{line:77,column:8},end:{line:77,column:52}},"14":{start:{line:81,column:0},end:{line:83,column:3}},"15":{start:{line:82,column:4},end:{line:82,column:53}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:54,column:24},end:{line:54,column:25}},loc:{start:{line:54,column:44},end:{line:79,column:1}},line:54},"1":{name:"(anonymous_1)",decl:{start:{line:81,column:17},end:{line:81,column:18}},loc:{start:{line:81,column:23},end:{line:83,column:1}},line:81}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0},f:{"0":0,"1":0},b:{},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"12742046216c3bf9218df4db0817a9ea9e8bbb56"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_29udg5rdtq=function(){return actualCoverage;};}return actualCoverage;}cov_29udg5rdtq();// // forgetPassword.js
// const nodeMailer = require('nodemailer');
// const html = `
//     <h1>Hello!</h1>
//     <p>This email is for you to reset your password. Thanks!</p>
// `;
// async function forgetPassword() {
//     const transporter = nodeMailer.createTransport({
//         host: "mail.openjavascript.info", // SMTP server address (usually mail.your-domain.com)
//         port: 465, // Port for SMTP (usually 465)
//         secure: true, // Usually true if connecting to port 465
//         auth: {
//             user: "test@openjavascipt.info", // Your email address
//             pass: "NodeMailer123!",
//         }
//     });
//     const info = await transporter.sendMail({
//         from: 'OpenJavaScript <test@javascript.info>',
//         to: 'test2@openjavascript.info',
//         subject: 'Testing, testing, 123',
//         html: html,
//     })
//     console.log("Message sent" + info.messageId);
// }
// forgetPassword()
// .catch(e => console.log(e));
// //function forgetPassword() {
// //    const email = document.getElementById('email').value;
// // redirects the user to a page where user can input their email for reset of password
// //    window.location.href = 'password_reset_sent.html';
// //}
// server.js
const express=(cov_29udg5rdtq().s[0]++,require('express'));const nodeMailer=(cov_29udg5rdtq().s[1]++,require('nodemailer'));const app=(cov_29udg5rdtq().s[2]++,express());const port=(cov_29udg5rdtq().s[3]++,3000);cov_29udg5rdtq().s[4]++;app.use(express.json());const html=(cov_29udg5rdtq().s[5]++,`
    <h1>Hello!</h1>
    <p>This email is for you to reset your password. Thanks!</p>
`);cov_29udg5rdtq().s[6]++;app.post('/send-email',async(req,res)=>{cov_29udg5rdtq().f[0]++;cov_29udg5rdtq().s[7]++;try{const transporter=(cov_29udg5rdtq().s[8]++,nodeMailer.createTransport({host:"mail.openjavascript.info",port:465,secure:true,auth:{user:"test@openjavascript.info",pass:"NodeMailer123!"}}));const info=(cov_29udg5rdtq().s[9]++,await transporter.sendMail({from:'OpenJavaScript <test@javascript.info>',to:'carasim80@gmail.com',// assuming you pass the email address through the request body
subject:'Testing, testing, 123',html:html}));cov_29udg5rdtq().s[10]++;console.log("Message sent"+info.messageId);cov_29udg5rdtq().s[11]++;res.status(200).send('Email sent successfully');}catch(error){cov_29udg5rdtq().s[12]++;console.error(error);cov_29udg5rdtq().s[13]++;res.status(500).send('Error sending email');}});cov_29udg5rdtq().s[14]++;app.listen(port,()=>{cov_29udg5rdtq().f[1]++;cov_29udg5rdtq().s[15]++;console.log(`Server is running on port ${port}`);});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMjl1ZGc1cmR0cSIsImFjdHVhbENvdmVyYWdlIiwiZXhwcmVzcyIsInMiLCJyZXF1aXJlIiwibm9kZU1haWxlciIsImFwcCIsInBvcnQiLCJ1c2UiLCJqc29uIiwiaHRtbCIsInBvc3QiLCJyZXEiLCJyZXMiLCJmIiwidHJhbnNwb3J0ZXIiLCJjcmVhdGVUcmFuc3BvcnQiLCJob3N0Iiwic2VjdXJlIiwiYXV0aCIsInVzZXIiLCJwYXNzIiwiaW5mbyIsInNlbmRNYWlsIiwiZnJvbSIsInRvIiwic3ViamVjdCIsImNvbnNvbGUiLCJsb2ciLCJtZXNzYWdlSWQiLCJzdGF0dXMiLCJzZW5kIiwiZXJyb3IiLCJsaXN0ZW4iXSwic291cmNlcyI6WyJmb3JnZXRQYXNzd29yZC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAvLyBmb3JnZXRQYXNzd29yZC5qc1xyXG4vLyBjb25zdCBub2RlTWFpbGVyID0gcmVxdWlyZSgnbm9kZW1haWxlcicpO1xyXG5cclxuLy8gY29uc3QgaHRtbCA9IGBcclxuLy8gICAgIDxoMT5IZWxsbyE8L2gxPlxyXG4vLyAgICAgPHA+VGhpcyBlbWFpbCBpcyBmb3IgeW91IHRvIHJlc2V0IHlvdXIgcGFzc3dvcmQuIFRoYW5rcyE8L3A+XHJcbi8vIGA7XHJcblxyXG4vLyBhc3luYyBmdW5jdGlvbiBmb3JnZXRQYXNzd29yZCgpIHtcclxuXHJcbi8vICAgICBjb25zdCB0cmFuc3BvcnRlciA9IG5vZGVNYWlsZXIuY3JlYXRlVHJhbnNwb3J0KHtcclxuLy8gICAgICAgICBob3N0OiBcIm1haWwub3BlbmphdmFzY3JpcHQuaW5mb1wiLCAvLyBTTVRQIHNlcnZlciBhZGRyZXNzICh1c3VhbGx5IG1haWwueW91ci1kb21haW4uY29tKVxyXG4vLyAgICAgICAgIHBvcnQ6IDQ2NSwgLy8gUG9ydCBmb3IgU01UUCAodXN1YWxseSA0NjUpXHJcbi8vICAgICAgICAgc2VjdXJlOiB0cnVlLCAvLyBVc3VhbGx5IHRydWUgaWYgY29ubmVjdGluZyB0byBwb3J0IDQ2NVxyXG4vLyAgICAgICAgIGF1dGg6IHtcclxuLy8gICAgICAgICAgICAgdXNlcjogXCJ0ZXN0QG9wZW5qYXZhc2NpcHQuaW5mb1wiLCAvLyBZb3VyIGVtYWlsIGFkZHJlc3NcclxuLy8gICAgICAgICAgICAgcGFzczogXCJOb2RlTWFpbGVyMTIzIVwiLFxyXG4vLyAgICAgICAgIH1cclxuLy8gICAgIH0pO1xyXG5cclxuLy8gICAgIGNvbnN0IGluZm8gPSBhd2FpdCB0cmFuc3BvcnRlci5zZW5kTWFpbCh7XHJcbi8vICAgICAgICAgZnJvbTogJ09wZW5KYXZhU2NyaXB0IDx0ZXN0QGphdmFzY3JpcHQuaW5mbz4nLFxyXG4vLyAgICAgICAgIHRvOiAndGVzdDJAb3BlbmphdmFzY3JpcHQuaW5mbycsXHJcbi8vICAgICAgICAgc3ViamVjdDogJ1Rlc3RpbmcsIHRlc3RpbmcsIDEyMycsXHJcbi8vICAgICAgICAgaHRtbDogaHRtbCxcclxuLy8gICAgIH0pXHJcblxyXG4vLyAgICAgY29uc29sZS5sb2coXCJNZXNzYWdlIHNlbnRcIiArIGluZm8ubWVzc2FnZUlkKTtcclxuLy8gfVxyXG5cclxuLy8gZm9yZ2V0UGFzc3dvcmQoKVxyXG4vLyAuY2F0Y2goZSA9PiBjb25zb2xlLmxvZyhlKSk7XHJcblxyXG4vLyAvL2Z1bmN0aW9uIGZvcmdldFBhc3N3b3JkKCkge1xyXG4vLyAvLyAgICBjb25zdCBlbWFpbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdlbWFpbCcpLnZhbHVlO1xyXG5cclxuLy8gLy8gcmVkaXJlY3RzIHRoZSB1c2VyIHRvIGEgcGFnZSB3aGVyZSB1c2VyIGNhbiBpbnB1dCB0aGVpciBlbWFpbCBmb3IgcmVzZXQgb2YgcGFzc3dvcmRcclxuLy8gLy8gICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSAncGFzc3dvcmRfcmVzZXRfc2VudC5odG1sJztcclxuLy8gLy99XHJcblxyXG4vLyBzZXJ2ZXIuanNcclxuY29uc3QgZXhwcmVzcyA9IHJlcXVpcmUoJ2V4cHJlc3MnKTtcclxuY29uc3Qgbm9kZU1haWxlciA9IHJlcXVpcmUoJ25vZGVtYWlsZXInKTtcclxuY29uc3QgYXBwID0gZXhwcmVzcygpO1xyXG5jb25zdCBwb3J0ID0gMzAwMDtcclxuXHJcbmFwcC51c2UoZXhwcmVzcy5qc29uKCkpO1xyXG5cclxuY29uc3QgaHRtbCA9IGBcclxuICAgIDxoMT5IZWxsbyE8L2gxPlxyXG4gICAgPHA+VGhpcyBlbWFpbCBpcyBmb3IgeW91IHRvIHJlc2V0IHlvdXIgcGFzc3dvcmQuIFRoYW5rcyE8L3A+XHJcbmA7XHJcblxyXG5hcHAucG9zdCgnL3NlbmQtZW1haWwnLCBhc3luYyAocmVxLCByZXMpID0+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgdHJhbnNwb3J0ZXIgPSBub2RlTWFpbGVyLmNyZWF0ZVRyYW5zcG9ydCh7XHJcbiAgICAgICAgICAgIGhvc3Q6IFwibWFpbC5vcGVuamF2YXNjcmlwdC5pbmZvXCIsXHJcbiAgICAgICAgICAgIHBvcnQ6IDQ2NSxcclxuICAgICAgICAgICAgc2VjdXJlOiB0cnVlLFxyXG4gICAgICAgICAgICBhdXRoOiB7XHJcbiAgICAgICAgICAgICAgICB1c2VyOiBcInRlc3RAb3BlbmphdmFzY3JpcHQuaW5mb1wiLFxyXG4gICAgICAgICAgICAgICAgcGFzczogXCJOb2RlTWFpbGVyMTIzIVwiLFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGNvbnN0IGluZm8gPSBhd2FpdCB0cmFuc3BvcnRlci5zZW5kTWFpbCh7XHJcbiAgICAgICAgICAgIGZyb206ICdPcGVuSmF2YVNjcmlwdCA8dGVzdEBqYXZhc2NyaXB0LmluZm8+JyxcclxuICAgICAgICAgICAgdG86ICdjYXJhc2ltODBAZ21haWwuY29tJywgLy8gYXNzdW1pbmcgeW91IHBhc3MgdGhlIGVtYWlsIGFkZHJlc3MgdGhyb3VnaCB0aGUgcmVxdWVzdCBib2R5XHJcbiAgICAgICAgICAgIHN1YmplY3Q6ICdUZXN0aW5nLCB0ZXN0aW5nLCAxMjMnLFxyXG4gICAgICAgICAgICBodG1sOiBodG1sLFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBjb25zb2xlLmxvZyhcIk1lc3NhZ2Ugc2VudFwiICsgaW5mby5tZXNzYWdlSWQpO1xyXG4gICAgICAgIHJlcy5zdGF0dXMoMjAwKS5zZW5kKCdFbWFpbCBzZW50IHN1Y2Nlc3NmdWxseScpO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcclxuICAgICAgICByZXMuc3RhdHVzKDUwMCkuc2VuZCgnRXJyb3Igc2VuZGluZyBlbWFpbCcpO1xyXG4gICAgfVxyXG59KTtcclxuXHJcbmFwcC5saXN0ZW4ocG9ydCwgKCkgPT4ge1xyXG4gICAgY29uc29sZS5sb2coYFNlcnZlciBpcyBydW5uaW5nIG9uIHBvcnQgJHtwb3J0fWApO1xyXG59KTtcclxuIl0sIm1hcHBpbmdzIjoidTVEQWVZO0FBQUFBLGNBQUEsU0FBQUEsQ0FBQSxTQUFBQyxjQUFBLFdBQUFBLGNBQUEsRUFBQUQsY0FBQSxHQWZaO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQSxLQUFNLENBQUFFLE9BQU8sRUFBQUYsY0FBQSxHQUFBRyxDQUFBLE1BQUdDLE9BQU8sQ0FBQyxTQUFTLENBQUMsRUFDbEMsS0FBTSxDQUFBQyxVQUFVLEVBQUFMLGNBQUEsR0FBQUcsQ0FBQSxNQUFHQyxPQUFPLENBQUMsWUFBWSxDQUFDLEVBQ3hDLEtBQU0sQ0FBQUUsR0FBRyxFQUFBTixjQUFBLEdBQUFHLENBQUEsTUFBR0QsT0FBTyxDQUFDLENBQUMsRUFDckIsS0FBTSxDQUFBSyxJQUFJLEVBQUFQLGNBQUEsR0FBQUcsQ0FBQSxNQUFHLElBQUksRUFBQ0gsY0FBQSxHQUFBRyxDQUFBLE1BRWxCRyxHQUFHLENBQUNFLEdBQUcsQ0FBQ04sT0FBTyxDQUFDTyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBRXZCLEtBQU0sQ0FBQUMsSUFBSSxFQUFBVixjQUFBLEdBQUFHLENBQUEsTUFBSTtBQUNkO0FBQ0E7QUFDQSxDQUFDLEVBQUNILGNBQUEsR0FBQUcsQ0FBQSxNQUVGRyxHQUFHLENBQUNLLElBQUksQ0FBQyxhQUFhLENBQUUsTUFBT0MsR0FBRyxDQUFFQyxHQUFHLEdBQUssQ0FBQWIsY0FBQSxHQUFBYyxDQUFBLE1BQUFkLGNBQUEsR0FBQUcsQ0FBQSxNQUN4QyxHQUFJLENBQ0EsS0FBTSxDQUFBWSxXQUFXLEVBQUFmLGNBQUEsR0FBQUcsQ0FBQSxNQUFHRSxVQUFVLENBQUNXLGVBQWUsQ0FBQyxDQUMzQ0MsSUFBSSxDQUFFLDBCQUEwQixDQUNoQ1YsSUFBSSxDQUFFLEdBQUcsQ0FDVFcsTUFBTSxDQUFFLElBQUksQ0FDWkMsSUFBSSxDQUFFLENBQ0ZDLElBQUksQ0FBRSwwQkFBMEIsQ0FDaENDLElBQUksQ0FBRSxnQkFDVixDQUNKLENBQUMsQ0FBQyxFQUVGLEtBQU0sQ0FBQUMsSUFBSSxFQUFBdEIsY0FBQSxHQUFBRyxDQUFBLE1BQUcsS0FBTSxDQUFBWSxXQUFXLENBQUNRLFFBQVEsQ0FBQyxDQUNwQ0MsSUFBSSxDQUFFLHVDQUF1QyxDQUM3Q0MsRUFBRSxDQUFFLHFCQUFxQixDQUFFO0FBQzNCQyxPQUFPLENBQUUsdUJBQXVCLENBQ2hDaEIsSUFBSSxDQUFFQSxJQUNWLENBQUMsQ0FBQyxFQUFDVixjQUFBLEdBQUFHLENBQUEsT0FFSHdCLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLGNBQWMsQ0FBR04sSUFBSSxDQUFDTyxTQUFTLENBQUMsQ0FBQzdCLGNBQUEsR0FBQUcsQ0FBQSxPQUM3Q1UsR0FBRyxDQUFDaUIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDQyxJQUFJLENBQUMseUJBQXlCLENBQUMsQ0FDbkQsQ0FBRSxNQUFPQyxLQUFLLENBQUUsQ0FBQWhDLGNBQUEsR0FBQUcsQ0FBQSxPQUNad0IsT0FBTyxDQUFDSyxLQUFLLENBQUNBLEtBQUssQ0FBQyxDQUFDaEMsY0FBQSxHQUFBRyxDQUFBLE9BQ3JCVSxHQUFHLENBQUNpQixNQUFNLENBQUMsR0FBRyxDQUFDLENBQUNDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxDQUMvQyxDQUNKLENBQUMsQ0FBQyxDQUFDL0IsY0FBQSxHQUFBRyxDQUFBLE9BRUhHLEdBQUcsQ0FBQzJCLE1BQU0sQ0FBQzFCLElBQUksQ0FBRSxJQUFNLENBQUFQLGNBQUEsR0FBQWMsQ0FBQSxNQUFBZCxjQUFBLEdBQUFHLENBQUEsT0FDbkJ3QixPQUFPLENBQUNDLEdBQUcsQ0FBRSw2QkFBNEJyQixJQUFLLEVBQUMsQ0FBQyxDQUNwRCxDQUFDLENBQUMifQ==